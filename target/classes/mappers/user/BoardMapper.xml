<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itbank.navercafe.user.board.mapper.BoardMapper">

	<resultMap type="com.itbank.navercafe.user.board.dto.BoardDTO" id="project_board">
		<id property="boardNum" column="board_num"/>
		<result property="boardTitle" column="board_title"/>
		<result property="boardContent" column="board_content"/>
		<result property="boardSaveDate" column="board_saveDate"/>
		<result property="boardLikes" column="board_likes"/>
		<result property="boardNotice" column="board_notice"/>
		<result property="boardReplyAllow" column="board_reply_allow"/>
		<result property="boardPrefix" column="board_prefix"/>
		<result property="userId" column="user_id"/>
		<result property="boardMenuNum" column="board_menu_num"/>
		<result property="hit" column="hit"/>
		<result property="cafeId" column="cafe_id"/>
	</resultMap>
	
	<resultMap type="com.itbank.navercafe.user.menu.dto.MenuDTO" id="project_board_type">
		<id property="boardMenuNum" column="board_menu_num"/>
		<result property="boardMenuDesc" column="board_menu_desc"/>
		<result property="boardWriteAuth" column="board_write_auth"/>
		<result property="boardReplyAuth" column="board_reply_auth"/>
		<result property="boardReadAuth" column="board_read_auth"/>
		<result property="boardMenuName" column="board_menu_name"/>
		<result property="cafeId" column="cafe_id"/>
		<result property="boardOrder" column="board_order"/>
		<result property="boardMenuType" column="board_menu_type"/>
	</resultMap>

	<resultMap type="com.itbank.navercafe.user.board.dto.LikesDTO" id="project_likes">
		<id property="boardNum" column="board_num"/>
		<id property="userId" column="user_id"/>
	</resultMap>
	
	<resultMap type="com.itbank.navercafe.user.board.dto.BoardExtendDTO" id="boardExtend">
		<id property="boardNum" column="board_num"/>
		<result property="boardTitle" column="board_title"/>
		<result property="boardContent" column="board_content"/>
		<result property="boardSaveDate" column="board_saveDate"/>
		<result property="boardLikes" column="board_likes"/>
		<result property="boardNotice" column="board_notice"/>
		<result property="boardReplyAllow" column="board_reply_allow"/>
		<result property="boardPrefix" column="board_prefix"/>
		<result property="userId" column="user_id"/>
		<result property="boardMenuNum" column="board_menu_num"/>
		<result property="hit" column="hit"/>
		<result property="cafeId" column="cafe_id"/>
		
		<result property="cafeUserNickname" column="cafe_user_nickname"/>
		<result property="cafeUserImageNum" column="cafe_user_image_num"/>
		<result property="cafeUserGrade" column="cafe_user_grade"/>
		<result property="cafeUserVisit" column="cafe_user_visit"/>
		<result property="cafeUserVisit" column="cafe_user_write"/>
		<result property="cafeUserReply" column="cafe_user_reply"/>
		<result property="cafeUserVisitCheck" column="cafe_user_visiy_check"/>
		<result property="cafeUserRegdate" column="cafe_user_regdate"/>
		<result property="cafeUserApplydate" column="cafe_user_applydate"/>
		<result property="cafeUserStatus" column="cafe_user_status"/>
		
		<result property="cutName" column="cut_name"/>
		<result property="upCafeUserGrade" column="up_cafe_user_grade"/>
		<result property="upCutName" column="up_cut_name"/>
		
		<result property="replyCount" column="reply_count"/>
		
        <result column="BOARD_MENU_NAME" property="boardMenuName"/>
        <result column="BOARD_MENU_DESC" property="boardMenuDesc"/>
       	<result column="BOARD_MENU_TYPE" property="boardMenuType"/>
        <result column="BOARD_WRITE_AUTH" property="boardWriteAuth"/>
        <result column="BOARD_REPLY_AUTH" property="boardReplyAuth"/>
        <result column="BOARD_READ_AUTH" property="boardReadAuth"/>
        <result column="BOARD_ORDER" property="boardOrder"/>
        <result column="BOARD_LIKES_FLAG" property="boardLikesFlag"/>
        <result column="BOARD_REPLY_FLAG" property="boardReplyFlag"/>
        <result column="BOARD_PREFIXES_FLAG" property="boardPrefixesFlag"/>
        <result column="BOARD_PUBLIC_FLAG" property="boardPublicFlag"/>
	</resultMap>

	<select id="getBoardList" resultMap="boardExtend">
		<![CDATA[
	        SELECT ROWNUM rn, boardData.*, grade.cut_name, upData.up_cut_name, upData.up_cafe_user_grade FROM
	            (select boardMenu.cafe_id, boardMenu.board_menu_name, boardMenu.board_menu_type, board.*, 
	            cafeMember.cafe_user_nickname, cafeMember.cafe_user_image_num, cafeMember.cafe_user_grade, 
	            cafeMember.cafe_user_visit, cafeMember.cafe_user_write, cafeMember.cafe_user_reply, cafeMember.cafe_user_visit_check, 
	            cafeMember.cafe_user_regdate, cafeMember.cafe_user_applydate, cafeMember.cafe_user_status
	            FROM
	                (SELECT cafe_id, board_menu_num, board_menu_name, board_menu_type FROM project_board_type
	                WHERE cafe_id = #{cafeId}
				]]>
				<choose>
				<when test="boardMenuNum != null and boardMenuNum > 0">
	    			AND board_menu_num = #{boardMenuNum}
	    		</when>
	    		<otherwise>
	    			AND BOARD_READ_AUTH = 0 
					AND BOARD_PUBLIC_FLAG = 'Y' 
					AND NOT BOARD_MENU_NUM IN(4, 6)
	    		</otherwise>
				</choose>
	    		
				<![CDATA[
	                ) boardMenu,
			        (SELECT * FROM project_board) board,
			        (SELECT * FROM project_cafe_member) cafeMember
			    WHERE
			    boardMenu.board_menu_num = board.board_menu_num
			    AND
                board.user_id = cafeMember.user_id
			    AND
			    boardMenu.cafe_id = cafeMember.cafe_id) boardData
	        LEFT JOIN   
	            (SELECT cafe_id, cafe_user_grade, cut_name from project_member_grade) grade
	        ON boardData.cafe_id = grade.cafe_id and boardData.cafe_user_grade = grade.cafe_user_grade 
			LEFT JOIN
			    (SELECT cafe_user_grade up_cafe_user_grade, cut_name up_cut_name, cafe_id FROM project_member_grade) upData
			ON boardData.cafe_user_grade+1 = upData.up_cafe_user_grade AND boardData.cafe_id = upData.cafe_id
			ORDER BY boardData.board_num DESC
		]]>		
	</select>
  
	<select id="getBoardList_paging" resultMap="boardExtend">
		<![CDATA[
			SELECT * FROM
			(SELECT ROWNUM RN, ALL_DATA.* FROM
			(SELECT BOARD_DATA.*, REPLY_DATA.REPLY_COUNT
			FROM
			    (SELECT BOARD.*
			    	, BOARD_TYPE.BOARD_MENU_NAME, BOARD_TYPE.BOARD_MENU_DESC, BOARD_TYPE.BOARD_MENU_TYPE, BOARD_TYPE.CAFE_ID
			    	, BOARD_TYPE.BOARD_WRITE_AUTH, BOARD_TYPE.BOARD_REPLY_AUTH, BOARD_TYPE.BOARD_READ_AUTH, BOARD_TYPE.BOARD_ORDER
			    	, BOARD_TYPE.BOARD_LIKES_FLAG, BOARD_TYPE.BOARD_REPLY_FLAG, BOARD_TYPE.BOARD_PREFIXES_FLAG, BOARD_TYPE.BOARD_PUBLIC_FLAG
			   	 	, CAFE_MEMBER.CAFE_USER_NICKNAME, CAFE_MEMBER.CAFE_USER_IMAGE_NUM, CAFE_MEMBER.CAFE_USER_GRADE
			    FROM
			        (SELECT * FROM PROJECT_BOARD_TYPE
			        WHERE CAFE_ID = #{cafeId}
			        AND BOARD_MENU_NUM = #{boardMenuNum}
			        ) BOARD_TYPE
			    INNER JOIN
			        (SELECT * FROM PROJECT_BOARD
			        WHERE BOARD_TITLE LIKE '%' || #{boardTitle} || '%'
			        AND BOARD_CONTENT LIKE '%' || #{boardContent} || '%'
					]]>
					<if test="boardNum != null and boardNum > 0">
			        AND BOARD_NUM = #{boardNum}
			        </if>
					<if test="(startSearchDate != null and startSearchDate != '') and (endSearchDate != null and endSearchDate != '')">      
			        AND BOARD_SAVEDATE BETWEEN TO_DATE(#{startSearchDate}, 'YYYY-MM-DD') AND TO_DATE(#{endSearchDate}, 'YYYY-MM-DD')+1
			        </if>
			        <![CDATA[
			        ) BOARD
			    ON BOARD_TYPE.BOARD_MENU_NUM = BOARD.BOARD_MENU_NUM
			    INNER JOIN
			        (SELECT * FROM PROJECT_CAFE_MEMBER
			        WHERE CAFE_USER_NICKNAME LIKE '%' || #{cafeUserNickname} || '%'
			        ) CAFE_MEMBER
			    ON BOARD.USER_ID = CAFE_MEMBER.USER_ID AND BOARD_TYPE.CAFE_ID = CAFE_MEMBER.CAFE_ID
			    ) BOARD_DATA
			]]>
			<choose>
			<when test="(replyContent != null and replyContent != '') or (replyUserNickname != null and replyUserNickname != '')">
			INNER JOIN
			</when>
			<otherwise>
			LEFT JOIN
			</otherwise>
			</choose>
			<![CDATA[  
			    (SELECT DISTINCT(BOARD_NUM), COUNT(*) REPLY_COUNT FROM
			        (SELECT BOARD_NUM, USER_ID FROM PROJECT_REPLY
			        WHERE REPLY_CONTENT LIKE '%' || #{replyContent} || '%'
			        ) REPLY
			        INNER JOIN
			        (SELECT USER_ID FROM PROJECT_CAFE_MEMBER
			        WHERE CAFE_USER_NICKNAME LIKE '%' || #{replyUserNickname} || '%'
			        ) REPLY_MEMBER
			    ON REPLY.USER_ID = REPLY_MEMBER.USER_ID
			    GROUP BY BOARD_NUM
			    ) REPLY_DATA
			ON BOARD_DATA.BOARD_NUM = REPLY_DATA.BOARD_NUM
			ORDER BY BOARD_DATA.BOARD_NUM DESC
			) ALL_DATA
			)
			WHERE RN BETWEEN #{startRow} AND #{endRow}
		]]>		
	</select>
	
	<select id="getBoardTotalCount" resultType="Integer">
		<![CDATA[
			SELECT COUNT(*) COUNT
				FROM
				    (SELECT BOARD.*
				    	, BOARD_TYPE.BOARD_MENU_NAME, BOARD_TYPE.BOARD_MENU_DESC, BOARD_TYPE.BOARD_MENU_TYPE, BOARD_TYPE.CAFE_ID
				    	, BOARD_TYPE.BOARD_WRITE_AUTH, BOARD_TYPE.BOARD_REPLY_AUTH, BOARD_TYPE.BOARD_READ_AUTH, BOARD_TYPE.BOARD_ORDER
				    	, BOARD_TYPE.BOARD_LIKES_FLAG, BOARD_TYPE.BOARD_REPLY_FLAG, BOARD_TYPE.BOARD_PREFIXES_FLAG, BOARD_TYPE.BOARD_PUBLIC_FLAG
				   	 	, CAFE_MEMBER.CAFE_USER_NICKNAME, CAFE_MEMBER.CAFE_USER_IMAGE_NUM, CAFE_MEMBER.CAFE_USER_GRADE
				    FROM
				        (SELECT * FROM PROJECT_BOARD_TYPE
				        WHERE CAFE_ID = #{cafeId}
				        AND BOARD_MENU_NUM = #{boardMenuNum}
				        ) BOARD_TYPE
				    INNER JOIN
				        (SELECT * FROM PROJECT_BOARD
				        WHERE BOARD_TITLE LIKE '%' || #{boardTitle} || '%'
				        AND BOARD_CONTENT LIKE '%' || #{boardContent} || '%'
				       	]]>
				       	<if test="boardNum != null and boardNum > 0">
				        AND BOARD_NUM = #{boardNum}
				        </if>
						<if test="(startSearchDate != null and startSearchDate != '') and (endSearchDate != null and endSearchDate != '')">        
				        AND BOARD_SAVEDATE BETWEEN TO_DATE(#{startSearchDate}, 'YYYY-MM-DD') AND TO_DATE(#{endSearchDate}, 'YYYY-MM-DD')+1
				        </if>
				        <![CDATA[
				        ) BOARD
				    ON BOARD_TYPE.BOARD_MENU_NUM = BOARD.BOARD_MENU_NUM
				    INNER JOIN
				        (SELECT * FROM PROJECT_CAFE_MEMBER
				        WHERE CAFE_USER_NICKNAME LIKE '%' || #{cafeUserNickname} || '%'
				        ) CAFE_MEMBER
				    ON BOARD.USER_ID = CAFE_MEMBER.USER_ID AND BOARD_TYPE.CAFE_ID = CAFE_MEMBER.CAFE_ID
				    ) BOARD_DATA
					]]>
					<choose>
					<when test="(replyContent != null and replyContent != '') or (replyUserNickname != null and replyUserNickname != '')">
					INNER JOIN
					</when>
					<otherwise>
					LEFT JOIN
					</otherwise>
					</choose>
					<![CDATA[
				    (SELECT DISTINCT(BOARD_NUM), COUNT(*) REPLY_COUNT FROM
				        (SELECT BOARD_NUM, USER_ID FROM PROJECT_REPLY
				        WHERE REPLY_CONTENT LIKE '%' || #{replyContent} || '%'
				        ) REPLY
				        INNER JOIN
				        (SELECT USER_ID FROM PROJECT_CAFE_MEMBER
				        WHERE CAFE_USER_NICKNAME LIKE '%' || #{replyUserNickname} || '%'
				        ) REPLY_MEMBER
				    ON REPLY.USER_ID = REPLY_MEMBER.USER_ID
				    GROUP BY BOARD_NUM
				    ) REPLY_DATA
				ON BOARD_DATA.BOARD_NUM = REPLY_DATA.BOARD_NUM
		]]>
	</select>
	

	<!-- 보드넘에 따른 게시물 하나 -->
	<select id="getUserBoard" resultMap="project_board">
		select * from project_board where board_num=#{boardNum}
	</select>
	

	<!-- 페이징 위해서 몇개인지 가져오기위한 용도-->
	<select id="selectBoardCount" resultType="Integer">
		select count(*) from project_board where board_menu_num=#{boardMenuNum}
	</select>
	
	<select id="getBoardNumList" resultMap="project_board">
		select * from project_board where board_menu_num=#{boardMenuNum}
	</select>
	
	<!-- 조회수 올려주는애 -->
	<update id="hitUp">
		update project_board set hit = hit+1 where board_num=#{boardNum}
	</update>
	
	<!-- 좋아요 테이블에 있는 값들 리스트로 빼오기 -->
	<select id="getLikesList" resultMap="project_likes">
		select * from project_likes where board_num=#{boardNum} and user_id=#{userId}
	</select>
	
	<!--좋아요 누르면 좋아요 테이블에도 값 추가  -->
	<update id="likeUp">
		update project_board set board_likes = board_likes+1 where board_num=#{boardNum}
	</update>
	<insert id="insertLike">
		insert into project_likes values(#{boardNum},#{userId})
	</insert>
	
	<!-- 좋아요 취소하면 좋아요 테이블에 있는 값도 삭제 -->
	<update id="likeDown">
		update project_board set board_likes = board_likes-1 where board_num=#{boardNum}
	</update>
	<delete id="deleteLike">
		delete from project_likes where board_num=#{boardNum} AND user_id=#{userId}
	</delete>
	
	<!-- 카페 인기글 -->
	<select id="topList" resultType="HashMap">
		select boardMenu.cafe_id, board.* from 
		(select * from project_board_type where cafe_id = #{cafeId}) boardMenu
		inner join
		(select *from project_board B inner join project_cafe_member C 
        on B.user_id = C.user_id where C.cafe_id=#{cafeId}) board
		on boardMenu.board_menu_num = board.board_menu_num order by board_likes desc
	</select>
	
	<!--보드 타입 정보 가져오기  -->
	<select id="getBoardMenuType" resultMap="project_board_type">
		select * from project_board_type where board_menu_num=#{boardMenuNum}
	</select>
	
	<!-- 보드 타입에 따른 리스트 가져오기 -->
	<select id="getBoardMenuTypeList" resultType="HashMap">
		select J.* from(select rownum rn, I.* from
		(select B.*,C.cafe_user_nickname from project_board B inner join project_cafe_member C
		on B.user_id = C.user_id where B.board_menu_num=#{boardMenuNum} and C.cafe_id=#{cafeId}
		order by board_num desc)I)J 
		where rn between #{start} and #{end}
	</select>
	
	<insert id="insertBoard">
		<![CDATA[
			INSERT INTO PROJECT_BOARD
				(BOARD_NUM, BOARD_TITLE, BOARD_CONTENT, BOARD_LIKES, 
				BOARD_NOTICE, BOARD_REPLY_ALLOW, BOARD_PREFIX,
				USER_ID, BOARD_MENU_NUM, HIT, BOARD_SAVEDATE)
			VALUES
				(PROJECT_BOARD_SEQ.NEXTVAL, #{boardTitle}, #{boardContent}, #{boardLikes},
				#{boardNotice}, #{boardReplyAllow}, #{boardPrefix},
				#{userId}, #{boardMenuNum}, #{hit}, SYSDATE)
		]]>
	</insert>
	
	<select id="checkGradeBoard" resultType="Integer">
		<![CDATA[
			SELECT COUNT(*) boardCount 
			FROM
				(SELECT * FROM PROJECT_BOARD_TYPE WHERE CAFE_ID = #{cafeId} AND BOARD_MENU_TYPE = 4) boardMenu
			INNER JOIN
				(SELECT * FROM PROJECT_BOARD WHERE USER_ID = #{userId}) board
			ON boardMenu.BOARD_MENU_NUM = board.BOARD_MENU_NUM
		]]>
	</select>
	
	<delete id="deleteBoard">
		delete project_board where board_num=#{boardNum}
	</delete>
	
	<delete id="deleteReply">
		delete project_reply where reply_num=#{replyNum}
	</delete>
	
	<select id="getExtendBoard" resultMap="boardExtend">
		<![CDATA[
			SELECT BOARD.*
		    	, BOARD_TYPE.BOARD_MENU_NAME, BOARD_TYPE.BOARD_MENU_DESC, BOARD_TYPE.BOARD_MENU_TYPE, BOARD_TYPE.CAFE_ID
		    	, BOARD_TYPE.BOARD_WRITE_AUTH, BOARD_TYPE.BOARD_REPLY_AUTH, BOARD_TYPE.BOARD_READ_AUTH, BOARD_TYPE.BOARD_ORDER
		    	, BOARD_TYPE.BOARD_LIKES_FLAG, BOARD_TYPE.BOARD_REPLY_FLAG, BOARD_TYPE.BOARD_PREFIXES_FLAG, BOARD_TYPE.BOARD_PUBLIC_FLAG
		   	 	, CAFE_MEMBER.CAFE_USER_NICKNAME, CAFE_MEMBER.CAFE_USER_IMAGE_NUM, CAFE_MEMBER.CAFE_USER_GRADE
		    FROM
		        (SELECT * FROM PROJECT_BOARD_TYPE
		        ) BOARD_TYPE
		    INNER JOIN
		        (SELECT * FROM PROJECT_BOARD
		        WHERE BOARD_NUM = #{boardNum}
		        ) BOARD
		    ON BOARD_TYPE.BOARD_MENU_NUM = BOARD.BOARD_MENU_NUM
		    INNER JOIN
		        (SELECT * FROM PROJECT_CAFE_MEMBER
		        ) CAFE_MEMBER
		    ON BOARD.USER_ID = CAFE_MEMBER.USER_ID AND BOARD_TYPE.CAFE_ID = CAFE_MEMBER.CAFE_ID
		]]>
	</select>

	<update id="updateBoard">
		<![CDATA[
			UPDATE PROJECT_BOARD SET
			BOARD_TITLE = #{boardTitle}
			, BOARD_CONTENT = #{boardContent}
			, BOARD_NOTICE = #{boardNotice}
			WHERE BOARD_NUM	= #{boardNum}
		]]>
	</update>
	
	<delete id="deleteBoard_returnResult">
		<![CDATA[
			DELETE FROM PROJECT_BOARD WHERE BOARD_NUM = #{boardNum}
		]]>
	</delete>
	
	<select id="getTodayWriterCount" resultType="Integer">
		<![CDATA[
			SELECT COUNT(*) COUNT FROM
				(SELECT DISTINCT(USER_ID) FROM PROJECT_BOARD 
				WHERE BOARD_MENU_NUM = #{boardMenuNum} 
				AND TO_CHAR(BOARD_SAVEDATE, 'YYYY-MM-DD') = #{searchDate})
		]]>
	</select>
	
	<select id="getTodayRank3List" resultType="Integer">
		<![CDATA[
			SELECT BOARD_NUM FROM
                (SELECT ROWNUM RN, BOARD_NUM FROM PROJECT_BOARD 
                WHERE BOARD_MENU_NUM = #{boardMenuNum}
                AND TO_CHAR(BOARD_SAVEDATE, 'YYYY-MM-DD') = #{searchDate}
                ORDER BY BOARD_NUM)
            WHERE RN BETWEEN 1 AND 3
		]]>
	</select>

</mapper>

